import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import toast from 'react-hot-toast';
import './MemoryGame.css';
import { soundManager } from './sounds';

// Kart aray√ºz√º
interface Card {
  id: number;
  imageUrl: string;
  flipped: boolean;
  matched: boolean;
}

// Kart √ßifti kontrol√º i√ßin bir type
type CardPair = {
  first: Card | null;
  second: Card | null;
};

const MemoryGame: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const previousState = location.state?.previousState;
  
  // Durum deƒüi≈ükenleri
  const [cards, setCards] = useState<Card[]>([]);
  const [flippedPair, setFlippedPair] = useState<CardPair>({ first: null, second: null });
  const [moves, setMoves] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [matchedPairs, setMatchedPairs] = useState(0);
  const [gameStarted, setGameStarted] = useState(false);
  const [loading, setLoading] = useState(true);
  const [availableImages, setAvailableImages] = useState<string[]>([]);
  const [isProcessing, setIsProcessing] = useState(false); // Kart kontrol√º sƒ±rasƒ±nda tƒ±klamalarƒ± engelleme

  // Kullanƒ±labilir resimleri y√ºkle
  useEffect(() => {
    const loadImages = async () => {
      try {
        // Resimleri 'public/images/memory' klas√∂r√ºnden getir
        const response = await fetch('/api/memory-images');
        if (!response.ok) {
          toast.error('Resim listesi alƒ±namadƒ±', {
            duration: 3000,
            position: 'top-center',
            style: {
              border: '1px solid #E57373',
              padding: '16px',
              color: '#D32F2F',
            },
          });
          throw new Error('Resim listesi alƒ±namadƒ±');
        }
        
        // Burada API yanƒ±tƒ±nƒ± bekleriz, ancak ≈üu an statik liste kullanƒ±yoruz
        // const data = await response.json();
        // Burada ger√ßek bir API olmadƒ±ƒüƒ± i√ßin statik bir liste kullanƒ±yoruz
        // Ger√ßek uygulamada bu veriyi API'den alacaksƒ±nƒ±z
        const imageList = [
          'gs.webp', 'gs2.webp', 'gs3.webp',
          'hp.webp', 'hp2.webp', 'hp3.webp',
          'ir.webp', 'ir2.webp', 'ir4.webp',
          'spd.webp', 'spd2.webp', 'spd4.webp',
          'tho.webp', 'thor2.webp', 'thor3.webp',
          'unicorn.webp', 'unicorn2.webp', 'unicorn3.webp',
          'bjk1.webp', 'bjk2.webp', 'bjk3.webp', 'bjk4.webp',
          'fnr3.webp', 'fnr4.webp', 'fnr5.webp', 'bjk4.webp',
          'mess1.webp', 'mess2.webp', 'mess3.webp', 'mess4.webp',
          'msss2.webp', 'mssspr.webp', 'mssss.webp', 'rbbt.webp',
        ];
        
        setAvailableImages(imageList);
        setLoading(false);
      } catch (error) {
        console.error('Resimler y√ºklenirken hata:', error);
        toast.error('Resimler y√ºklenirken bir sorun olu≈ütu. Varsayƒ±lan resimler kullanƒ±lacak.', {
          duration: 4000,
          position: 'top-center',
          style: {
            border: '1px solid #E57373',
            padding: '16px',
            color: '#D32F2F',
          },
        });
        // Hata durumunda bile bazƒ± statik resimler kullanarak oyunun √ßalƒ±≈ümasƒ±nƒ± saƒüla
        setAvailableImages([
          'gs.webp', 'gs2.webp', 'gs3.webp',
          'hp.webp', 'hp2.webp', 'hp3.webp',
          'ir.webp', 'ir2.webp', 'ir4.webp'
        ]);
        setLoading(false);
      }
    };

    loadImages();
  }, []);

  // Oyunu ba≈ülat
  const startGame = useCallback(() => {
    if (availableImages.length === 0) {
      toast.error('Oyun ba≈ülatƒ±lamƒ±yor, resimler y√ºklenemedi!', {
        duration: 3000,
        position: 'top-center',
      });
      return;
    }
    
    // 4x4 d√ºzen i√ßin 8 √ßift kart (toplam 16 kart)
    const numberOfPairs = 8;
    
    // Kullanƒ±labilir resimlerden rastgele se√ß
    const shuffledImages = [...availableImages].sort(() => 0.5 - Math.random());
    const selectedImages = shuffledImages.slice(0, numberOfPairs);
    
    // Her resimden 2 adet olacak ≈üekilde kart dizisini olu≈ütur
    let newCards: Card[] = [];
    selectedImages.forEach((image, index) => {
      // ƒ∞lk kart
      newCards.push({
        id: index * 2,
        imageUrl: `/images/memory/${image}`,
        flipped: false,
        matched: false
      });
      
      // E≈üle≈üen ikinci kart
      newCards.push({
        id: index * 2 + 1,
        imageUrl: `/images/memory/${image}`,
        flipped: false,
        matched: false
      });
    });
    
    // 4x4 i√ßin merkez karta gerek yok
    
    // Kartlarƒ± karƒ±≈ütƒ±r
    newCards = newCards.sort(() => 0.5 - Math.random());
    
    // Oyun durumunu sƒ±fƒ±rla
    setCards(newCards);
    setFlippedPair({ first: null, second: null });
    setMoves(0);
    setMatchedPairs(0);
    setGameOver(false);
    setGameStarted(true);
  }, [availableImages]);

  // Kart √ßevirme i≈ülemi
  const flipCard = (selectedCard: Card) => {
    // Eƒüer oyun bitti veya i≈ülem yapƒ±lƒ±yorsa tƒ±klamalarƒ± engelle
    if (gameOver || isProcessing) {
      toast.error('L√ºtfen bekleyin!', {
        duration: 1000,
        position: 'top-center'
      });
      return;
    }
    
    // Eƒüer kart zaten √ßevrilmi≈ü veya e≈üle≈ütirilmi≈üse, hi√ßbir ≈üey yapma
    if (selectedCard.flipped || selectedCard.matched) return;
    
    // Eƒüer iki kart zaten √ßevriliyse, ba≈üka kart √ßeviremez
    if (flippedPair.first && flippedPair.second) {
      toast.error('L√ºtfen bekleyin!', {
        duration: 1000,
        position: 'top-center'
      });
      return;
    }

    // Ses efekti
    soundManager.play('flip');
    
    // Se√ßilen kartƒ± √ßevir
    const updatedCards = cards.map(card => 
      card.id === selectedCard.id ? { ...card, flipped: true } : card
    );
    
    // √áevrilen ilk veya ikinci kart
    if (!flippedPair.first) {
      setFlippedPair({ first: selectedCard, second: null });
    } else {
      setFlippedPair({ ...flippedPair, second: selectedCard });
      setMoves(prevMoves => prevMoves + 1);
      
      // ƒ∞≈ülem devam ettiƒüini i≈üaretle
      setIsProcessing(true);
      
      // Hamle sayƒ±sƒ±nƒ± artƒ±r
      setTimeout(() => {
        checkForMatch(selectedCard);
      }, 1000);
    }
    
    setCards(updatedCards);
  };

  // E≈üle≈üme kontrol√º
  const checkForMatch = (secondCard: Card) => {
    if (!flippedPair.first) return;
    
    const isMatch = flippedPair.first.imageUrl === secondCard.imageUrl;
    
    if (isMatch) {
      // Ses efekti
      soundManager.play('match');
      
      // E≈üle≈üme bildirimi g√∂ster
      toast.success('E≈üle≈üme bulundu!', {
        duration: 1500,
        position: 'top-center',
        icon: 'üéâ',
        style: {
          border: '1px solid #81C784',
          padding: '16px',
          color: '#2E7D32',
        },
      });
      
      // E≈üle≈üen kartlarƒ± g√ºncelle - hem √ßevrilmi≈ü hem de e≈üle≈ümi≈ü olarak i≈üaretle
      const updatedCards = cards.map(card => 
        card.id === flippedPair.first?.id || card.id === secondCard.id
          ? { ...card, flipped: true, matched: true }
          : card
      );
      
      setCards(updatedCards);
      setMatchedPairs(prev => prev + 1);
      
      // Yeni e≈üle≈üme sayƒ±sƒ±nƒ± hesapla
      const newMatchedPairs = matchedPairs + 1;
      
      // 4x4 d√ºzen i√ßin gereken e≈üle≈üme sayƒ±sƒ± 8
      if (newMatchedPairs === cards.length / 2) {
        // Son bir kontrol daha yap - t√ºm kartlarƒ±n ger√ßekten e≈üle≈üip e≈üle≈ümediƒüine bak
        const allMatched = updatedCards.every(card => card.matched);
        
        if (allMatched) {
          // Oyun biti≈üi ses efekti
          soundManager.play('win');
          
          // Oyun tamamlandƒ± bildirimi
          toast.success('Tebrikler! Oyunu tamamladƒ±nƒ±z!', {
            duration: 5000,
            position: 'top-center',
            icon: 'üèÜ',
            style: {
              border: '1px solid #FFCA28',
              padding: '16px',
              color: '#F57F17',
              fontWeight: 'bold',
            },
          });
          
          setGameOver(true);
        }
      }
    } else {
      // E≈üle≈ümiyorsa kartlarƒ± geri √ßevir
      toast.error('E≈üle≈üme bulunamadƒ±!', {
        duration: 1000,
        position: 'top-center',
        style: {
          border: '1px solid #E57373',
          padding: '8px',
          color: '#D32F2F',
        },
      });
      
      setTimeout(() => {
        const updatedCards = cards.map(card => 
          // Sadece bu hamledeki √ßevrilmi≈ü ama e≈üle≈ümemi≈ü kartlarƒ± geri √ßevir
          (card.id === flippedPair.first?.id || card.id === secondCard.id) && !card.matched
            ? { ...card, flipped: false }
            : card
        );
        
        setCards(updatedCards);
        setIsProcessing(false); // ƒ∞≈ülem tamamlandƒ±
      }, 1000);
    }
    
    // Her durumda √ßevrilen kart √ßiftini sƒ±fƒ±rla
    setFlippedPair({ first: null, second: null });
    setIsProcessing(false); // ƒ∞≈ülem tamamlandƒ±
  };

  // Oyunu yeniden ba≈ülat
  const restartGame = () => {
    toast.success('Oyun yeniden ba≈ülatƒ±lƒ±yor...', {
      duration: 2000,
      position: 'top-center',
      icon: 'üîÑ',
    });
    startGame();
  };

  // Sonu√ßlar sayfasƒ±na d√∂n
  const returnToResults = () => {
    const quizId = location.state?.quizId || previousState?.quizId;
    const quizResultPath = quizId ? `/quiz/${quizId}/results` : '/quiz/results';
    
    toast('Sonu√ßlar sayfasƒ±na d√∂n√ºl√ºyor...', {
      duration: 2000,
      position: 'top-center',
      icon: '‚Ü©Ô∏è',
    });
    
    navigate(quizResultPath, { 
      state: { 
        ...previousState, 
        memoryGameScore: {
          moves,
          pairs: matchedPairs,
          completed: gameOver
        },
        fromMemoryGame: true 
      }, 
      replace: true 
    });
  };

  // Oyun y√ºklenirken g√∂ster
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen bg-gray-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-3 text-gray-600">Oyun y√ºkleniyor...</p>
        </div>
      </div>
    );
  }

  // Oyunu ba≈ülatmadƒ±ysa g√∂ster
  if (!gameStarted) {
    return (
      <div className="flex flex-col justify-center items-center h-screen bg-gray-100 px-4">
        <h1 className="text-3xl font-bold text-gray-800 mb-6">Hafƒ±za Kartƒ± Oyununa Ho≈ü Geldiniz!</h1>
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full text-center">
          <p className="mb-6 text-gray-600">
            E≈üle≈üen kartlarƒ± bulmaya √ßalƒ±≈ü! T√ºm √ßiftleri en az hamlede e≈üle≈ütirmeye √ßalƒ±≈ü.
          </p>
          <button 
            onClick={startGame}
            className="bg-green-500 hover:bg-green-600 text-white font-medium py-3 px-6 rounded-lg shadow transition-colors"
          >
            Oyunu Ba≈ülat
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 py-8 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Oyun bilgileri */}
        <div className="bg-white p-4 rounded-lg shadow-md mb-4 flex flex-wrap justify-between items-center">
          <div>
            <h1 className="text-xl font-bold text-gray-800">Hafƒ±za Kartƒ± Oyunu</h1>
            <p className="text-gray-600">E≈üle≈üen kartlarƒ± bul!</p>
          </div>
          <div className="flex gap-4 items-center">
            <div className="text-center">
              <p className="text-sm text-gray-500">Hamleler</p>
              <p className="text-2xl font-bold text-indigo-600">{moves}</p>
            </div>
            <div className="text-center">
              <p className="text-sm text-gray-500">E≈üle≈ümeler</p>
              <p className="text-2xl font-bold text-green-600">{matchedPairs} / {cards.length / 2}</p>
            </div>
          </div>
        </div>

        {/* Kart ƒ±zgarasƒ± */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="grid grid-cols-4 sm:grid-cols-4 md:grid-cols-4 gap-2">
            {cards.map(card => (
              <div 
                key={card.id} 
                onClick={() => !gameOver && flipCard(card)}
                className={`relative aspect-square rounded-md shadow-sm cursor-pointer transition-transform duration-300 transform ${card.flipped ? 'rotate-y-180' : ''} ${card.matched ? 'opacity-70' : ''}`}
              >
                {/* √ñn y√ºz (kapalƒ± hali) */}
                <div className={`absolute w-full h-full bg-gradient-to-r from-blue-400 to-indigo-500 rounded-md flex items-center justify-center ${card.flipped || card.matched ? 'hidden' : 'block'}`}>
                  <span className="text-white text-2xl">?</span>
                </div>
                
                {/* Arka y√ºz (a√ßƒ±k hali) */}
                <div className={`absolute w-full h-full rounded-md overflow-hidden ${card.flipped || card.matched ? 'block' : 'hidden'}`}>
                  <img 
                    src={card.imageUrl} 
                    alt="Memory Card" 
                    className="w-full h-full object-contain rounded-md p-1"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.onerror = null;
                      target.src = '/images/card-back.png'; // Kart arka y√ºz√º deƒüi≈ütirildi
                    }}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Oyun Sonu */}
        {gameOver && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10 p-4">
            <div className="bg-white rounded-lg shadow-xl p-8 max-w-sm w-full text-center">
              <h2 className="text-2xl font-bold text-gray-800 mb-4">Tebrikler!</h2>
              <p className="text-gray-600 mb-6">
                T√ºm kartlarƒ± {moves} hamlede e≈üle≈ütirdin.
              </p>
              <div className="flex flex-col gap-3">
                <button 
                  onClick={restartGame}
                  className="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded shadow transition-colors"
                >
                  Tekrar Oyna
                </button>
                <button 
                  onClick={returnToResults}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded shadow transition-colors"
                >
                  Sonu√ßlara D√∂n
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default MemoryGame;
